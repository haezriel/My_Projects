"""
	Michael Allen-Bond
	CS440 Artificial Intelligence
	Dr. Scott Wallace
"""

"""So, you say on the homework to halt when the iteration completes without producing  change in the policy, "as stated in the book".  This is not what is stated in the book. The book's algorithm keeps going as long as the policy evaluation is higher for the new iteration, even though this does not change the policy after the 3rd iteration (in this case).  It will keep going for 9 iterations (In this case), if you follow the algorithm exactly, and set unchanged to false every time a utility value is higher, even though the policy values stop changing after the 3rd iteration. """

board ={(1,1):0,
		(1,2):0,
		(1,3):0,
		(2,1):0,
		(2,3):0,
		(3,1):0,
		(3,2):0,
		(3,3):0,
		(4,1):0,
		(4,2):-1,
		(4,3):1}
U={(1,1):0,
		(1,2):0,
		(1,3):0,
		(2,1):0,
		(2,3):0,
		(3,1):0,
		(3,2):0,
		(3,3):0,
		(4,1):0,
		(4,2):-1,
		(4,3):1}
V={(1,1):'left',
		(1,2):'left',
		(1,3):'left',
		(2,1):'left',
		(2,3):'left',
		(3,1):'left',
		(3,2):'left',
		(3,3):'left',
		(4,1):'left',
		(4,2):'term',
		(4,3):'term'}

policy ={(1,1):'left',
		(1,2):'left',
		(1,3):'left',
		(2,1):'left',
		(2,3):'left',
		(3,1):'left',
		(3,2):'left',
		(3,3):'left',
		(4,1):'left',
		(4,2):'term',
		(4,3):'term'}
counter=1

while 1:
	print 'Iteration #{}'.format(counter)
	counter=counter+1
	unchanged=1
	count=0
	while count<5:
		count=count+1
		for x in range (1,5):
			for y in range (1,4):
				if (x,y) in board:
					U[(x,y)]=board[(x,y)]
					if (x+1,y) in board:
						right=board[(x+1,y)]
					else:
						right=board[(x,y)]
					if (x-1,y) in board:
						left=board[(x-1,y)]
					else:
						left=board[(x,y)]
					if (x,y+1) in board:
						up=board[(x,y+1)]
					else:
						up=board[(x,y)]
					if (x,y-1) in board:
						down=board[(x,y-1)]
					else:
						down=board[(x,y)]
					a=.8*up + .1*left + .1*right
					b=.8*left + .1*up +.1*down
					c=.8*down +.1*left + .1*right
					d=.8*right+.1*up +.1*down
					if board[(x,y)]==1 or board[(x,y)]==-1:
						pass
					else:
						f=max(a,b,c,d)
						board[(x,y)]=-.04+f
						if a==f:
							policy[(x,y)]='up'
						if b==f:
							policy[(x,y)]='left'
						if c==f:
							policy[(x,y)]='down'
						if d==f:
							policy[(x,y)]='right'
	for x in range (1,5):
		for y in range (1,4):
			if (x,y) in board:
				if U[(x,y)]<board[(x,y)]:
					if V[(x,y)]!= policy[(x,y)]:
						unchanged=0
					V[(x,y)]=policy[(x,y)]
					print 'S({},{}):{}, {}'.format(x,y,board[(x,y)],V[(x,y)])
				else:
					print 'S({},{}):{}, {}'.format(x,y,U[(x,y)],V[(x,y)])
	if unchanged==1:
		break

